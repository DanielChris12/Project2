# ------------------------
# DEPLOYMENT MANIFEST
# ------------------------
# TIP: 
# 1. Replace 'kind: ReplicaSet' --> 'kind: Deployment'
# 2. Change the name under 'metadata' & create replicas as required

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      name: my-pod1
  template:
    metadata:
      labels:
        name: my-pod1
    spec:
      containers:
      - name: container1
        image: nginx:1.19.0  # Old version
        ports:
        - containerPort: 80
...

# ------------
# COMMANDS
# ------------
kubectl apply -f deploy.yaml                                      #(to create deployment from the above manifest)
kubectl get deploy                                                #(to see list of pods, we can run 'deploy', 'deployment', 'deployments')

# Rollout/Rollback Commands
# Try changing the image in above manifest to 1.20.0 & run below:
kubectl rollout restart deploy my-deployment                      #(to rollout the deployment to new version)
kubectl rollout status deploy my-deployment                       #(to check the new rollout status)
kubectl rollout history deployment/my-deployment                  #(shows the history of version numbers)
kubectl rollout undo deployment/my-deployment                     #(to rollback to previous version)
kubectl rollout undo deployment/my-deployment --to-revision=2     #(to rollback to specific version from history)


# NOTE:
1. There is no need to maintain separate yaml files for rollout/rollback, deployment maintains a history of deployments
2. Deployment itself cannot expose pods to outside world, we need to combine it with 'Service'
3. We need to combine it with 'PV/PVC' to integrate it with external storages.
4. Deployment is ideal for stateless applications like webservers.
   For stateful applications like Database servers, we use 'StatefulSet' object.
